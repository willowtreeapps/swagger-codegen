{{#models}}
{{#model}}
#import "SWGDate.h"
#import "{{classname}}.h"

@implementation {{classname}}{{#parent}}: {{parent}}{{/parent}}

{{#hasVars}}
- (instancetype)initWith{{#initialVar}}{{name}}:({{datatype}}){{lowercaseName}}{{/initialVar}}{{#remainingVars}} {{name}}:({{datatype}}){{name}}{{^hasMore}}{{/hasMore}}{{/remainingVars}}
{
    self = [super init];
    if (self)
    {
        {{#vars}}_{{name}} = {{name}};
        {{/vars}}
    }

    return self;
}
{{/hasVars}}

- (id)initWithValues:(NSDictionary*)dict
{
    {{#vars}}{{#isPrimitiveType}}{{datatype}} {{name}} = dict[@"{{baseName}}"];{{/isPrimitiveType}}
    {{#complexType}}id {{name}}_dict = dict[@"{{baseName}}"];{{#isContainer}}
    NSArray *{{name}} = nil;
    if([{{name}}_dict isKindOfClass:[NSArray class]])
    {
        NSMutableArray * objs = [[NSMutableArray alloc] initWithCapacity:[(NSArray*){{name}}_dict count]];
        if([(NSArray*){{name}}_dict count] > 0)
        {
            for (NSDictionary* dict in (NSArray*){{name}}_dict)
            {
                {{{complexType}}}* d = [[{{#instantiationType}}NSClassFromString(@"{{{instantiationType}}}") {{/instantiationType}}{{^instantiationType}}{{{complexType}}} {{/instantiationType}} alloc] initWithValues:dict];
                [objs addObject:d];
            }
            {{{name}}} = [[NSArray alloc] initWithArray:objs];
        }
        else
        {
            {{name}} = [[NSArray alloc] init];
        }
    }
    else
    {
        {{name}} = [[NSArray alloc] init];
    }{{/isContainer}}
    {{#isNotContainer}}
    {{datatype}} {{name}} = nil;
    if({{name}}_dict != nil)
    {
        {{name}} = [[{{#instantiationType}}NSClassFromString(@"{{{instantiationType}}}") {{/instantiationType}}{{^instantiationType}}{{{complexType}}} {{/instantiationType}} alloc]initWithValues:{{name}}_dict];
    }
    {{/isNotContainer}}
    {{/complexType}}{{/vars}}
    return [self initWith{{#initialVar}}{{name}}:{{lowercaseName}}{{/initialVar}}{{#remainingVars}} {{name}}:{{name}}{{^hasMore}}{{/hasMore}}{{/remainingVars}}];
}

- (NSDictionary *)asDictionary {
    NSMutableDictionary* dict = [[NSMutableDictionary alloc] init];
    {{#vars}}{{#complexType}}
    if(_{{name}} != nil){
        {{#isContainer}}
        if([_{{name}} isKindOfClass:[NSArray class]]){
        NSMutableArray * array = [[NSMutableArray alloc] init];
            for( {{complexType}} *{{name}} in _{{name}}) {
                [array addObject:[(SWGObject*){{name}} asDictionary]];
            }
            dict[@"{{name}}"] = array;
        }
        {{/isContainer}}
        {{^isContainer}}
        if(_{{name}} && [_{{name}} isKindOfClass:[SWGDate class]]) {
            NSString * dateString = [(SWGDate*)_{{name}} toString];
            if(dateString){
            dict[@"{{name}}"] = dateString;
            }
        }
        else {
            if(_{{name}} != nil)
            dict[@"{{baseName}}"] = [(SWGObject*)_{{name}} asDictionary];
        }
        {{/isContainer}}
    }
    {{/complexType}}
    {{#isPrimitiveType}}{{#isNotContainer}}
    if(_{{name}} != nil)
        dict[@"{{baseName}}"] = _{{name}};
    {{/isNotContainer}}
    {{#isContainer}}
    if(_{{name}} != nil) {
        if([_{{name}} isKindOfClass:[NSArray class]]) {
            dict[@"_{{name}}"] = [[NSArray alloc] initWithArray: (NSArray*) _{{name}} copyItems:true];
        }
        else if([_{{name}} isKindOfClass:[NSDictionary class]]) {
            dict[@"{{name}}"] = [[NSDictionary alloc] initWithDictionary:(NSDictionary*)_{{name}} copyItems:true];
        }
    }
    {{/isContainer}}
    {{/isPrimitiveType}}{{/vars}}
    NSDictionary* output = [dict copy];
    return output;
}

{{/model}}
@end
{{/models}}
